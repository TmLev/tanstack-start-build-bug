/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as tailwindRouteRouteImport } from './routes/(tailwind)/route'
import { Route as authedRouteRouteImport } from './routes/(authed)/route'
import { Route as authedIndexRouteImport } from './routes/(authed)/index'
import { Route as tailwindSocialFeedRouteImport } from './routes/(tailwind)/social-feed'
import { Route as tailwindRandomRouteImport } from './routes/(tailwind)/random'
import { Route as tailwindLandingPageRouteImport } from './routes/(tailwind)/landing-page'
import { Route as tailwindDataVisualizationRouteImport } from './routes/(tailwind)/data-visualization'
import { Route as tailwindAnotherRouteImport } from './routes/(tailwind)/another'
import { Route as tailwindAdminSettingsRouteImport } from './routes/(tailwind)/admin-settings'
import { Route as authedProjectAtaskBCRouteImport } from './routes/(authed)/project/$a/(task)/$b/$c'

const tailwindRouteRoute = tailwindRouteRouteImport.update({
  id: '/(tailwind)',
  getParentRoute: () => rootRouteImport,
} as any)
const authedRouteRoute = authedRouteRouteImport.update({
  id: '/(authed)',
  getParentRoute: () => rootRouteImport,
} as any)
const authedIndexRoute = authedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => authedRouteRoute,
} as any)
const tailwindSocialFeedRoute = tailwindSocialFeedRouteImport.update({
  id: '/social-feed',
  path: '/social-feed',
  getParentRoute: () => tailwindRouteRoute,
} as any)
const tailwindRandomRoute = tailwindRandomRouteImport.update({
  id: '/random',
  path: '/random',
  getParentRoute: () => tailwindRouteRoute,
} as any)
const tailwindLandingPageRoute = tailwindLandingPageRouteImport.update({
  id: '/landing-page',
  path: '/landing-page',
  getParentRoute: () => tailwindRouteRoute,
} as any)
const tailwindDataVisualizationRoute =
  tailwindDataVisualizationRouteImport.update({
    id: '/data-visualization',
    path: '/data-visualization',
    getParentRoute: () => tailwindRouteRoute,
  } as any)
const tailwindAnotherRoute = tailwindAnotherRouteImport.update({
  id: '/another',
  path: '/another',
  getParentRoute: () => tailwindRouteRoute,
} as any)
const tailwindAdminSettingsRoute = tailwindAdminSettingsRouteImport.update({
  id: '/admin-settings',
  path: '/admin-settings',
  getParentRoute: () => tailwindRouteRoute,
} as any)
const authedProjectAtaskBCRoute = authedProjectAtaskBCRouteImport.update({
  id: '/project/$a/(task)/$b/$c',
  path: '/project/$a/$b/$c',
  getParentRoute: () => authedRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof authedIndexRoute
  '/admin-settings': typeof tailwindAdminSettingsRoute
  '/another': typeof tailwindAnotherRoute
  '/data-visualization': typeof tailwindDataVisualizationRoute
  '/landing-page': typeof tailwindLandingPageRoute
  '/random': typeof tailwindRandomRoute
  '/social-feed': typeof tailwindSocialFeedRoute
  '/project/$a/$b/$c': typeof authedProjectAtaskBCRoute
}
export interface FileRoutesByTo {
  '/': typeof authedIndexRoute
  '/admin-settings': typeof tailwindAdminSettingsRoute
  '/another': typeof tailwindAnotherRoute
  '/data-visualization': typeof tailwindDataVisualizationRoute
  '/landing-page': typeof tailwindLandingPageRoute
  '/random': typeof tailwindRandomRoute
  '/social-feed': typeof tailwindSocialFeedRoute
  '/project/$a/$b/$c': typeof authedProjectAtaskBCRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(authed)': typeof authedRouteRouteWithChildren
  '/(tailwind)': typeof tailwindRouteRouteWithChildren
  '/(tailwind)/admin-settings': typeof tailwindAdminSettingsRoute
  '/(tailwind)/another': typeof tailwindAnotherRoute
  '/(tailwind)/data-visualization': typeof tailwindDataVisualizationRoute
  '/(tailwind)/landing-page': typeof tailwindLandingPageRoute
  '/(tailwind)/random': typeof tailwindRandomRoute
  '/(tailwind)/social-feed': typeof tailwindSocialFeedRoute
  '/(authed)/': typeof authedIndexRoute
  '/(authed)/project/$a/(task)/$b/$c': typeof authedProjectAtaskBCRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin-settings'
    | '/another'
    | '/data-visualization'
    | '/landing-page'
    | '/random'
    | '/social-feed'
    | '/project/$a/$b/$c'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/admin-settings'
    | '/another'
    | '/data-visualization'
    | '/landing-page'
    | '/random'
    | '/social-feed'
    | '/project/$a/$b/$c'
  id:
    | '__root__'
    | '/(authed)'
    | '/(tailwind)'
    | '/(tailwind)/admin-settings'
    | '/(tailwind)/another'
    | '/(tailwind)/data-visualization'
    | '/(tailwind)/landing-page'
    | '/(tailwind)/random'
    | '/(tailwind)/social-feed'
    | '/(authed)/'
    | '/(authed)/project/$a/(task)/$b/$c'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  authedRouteRoute: typeof authedRouteRouteWithChildren
  tailwindRouteRoute: typeof tailwindRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(tailwind)': {
      id: '/(tailwind)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof tailwindRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(authed)': {
      id: '/(authed)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(authed)/': {
      id: '/(authed)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authedIndexRouteImport
      parentRoute: typeof authedRouteRoute
    }
    '/(tailwind)/social-feed': {
      id: '/(tailwind)/social-feed'
      path: '/social-feed'
      fullPath: '/social-feed'
      preLoaderRoute: typeof tailwindSocialFeedRouteImport
      parentRoute: typeof tailwindRouteRoute
    }
    '/(tailwind)/random': {
      id: '/(tailwind)/random'
      path: '/random'
      fullPath: '/random'
      preLoaderRoute: typeof tailwindRandomRouteImport
      parentRoute: typeof tailwindRouteRoute
    }
    '/(tailwind)/landing-page': {
      id: '/(tailwind)/landing-page'
      path: '/landing-page'
      fullPath: '/landing-page'
      preLoaderRoute: typeof tailwindLandingPageRouteImport
      parentRoute: typeof tailwindRouteRoute
    }
    '/(tailwind)/data-visualization': {
      id: '/(tailwind)/data-visualization'
      path: '/data-visualization'
      fullPath: '/data-visualization'
      preLoaderRoute: typeof tailwindDataVisualizationRouteImport
      parentRoute: typeof tailwindRouteRoute
    }
    '/(tailwind)/another': {
      id: '/(tailwind)/another'
      path: '/another'
      fullPath: '/another'
      preLoaderRoute: typeof tailwindAnotherRouteImport
      parentRoute: typeof tailwindRouteRoute
    }
    '/(tailwind)/admin-settings': {
      id: '/(tailwind)/admin-settings'
      path: '/admin-settings'
      fullPath: '/admin-settings'
      preLoaderRoute: typeof tailwindAdminSettingsRouteImport
      parentRoute: typeof tailwindRouteRoute
    }
    '/(authed)/project/$a/(task)/$b/$c': {
      id: '/(authed)/project/$a/(task)/$b/$c'
      path: '/project/$a/$b/$c'
      fullPath: '/project/$a/$b/$c'
      preLoaderRoute: typeof authedProjectAtaskBCRouteImport
      parentRoute: typeof authedRouteRoute
    }
  }
}

interface authedRouteRouteChildren {
  authedIndexRoute: typeof authedIndexRoute
  authedProjectAtaskBCRoute: typeof authedProjectAtaskBCRoute
}

const authedRouteRouteChildren: authedRouteRouteChildren = {
  authedIndexRoute: authedIndexRoute,
  authedProjectAtaskBCRoute: authedProjectAtaskBCRoute,
}

const authedRouteRouteWithChildren = authedRouteRoute._addFileChildren(
  authedRouteRouteChildren,
)

interface tailwindRouteRouteChildren {
  tailwindAdminSettingsRoute: typeof tailwindAdminSettingsRoute
  tailwindAnotherRoute: typeof tailwindAnotherRoute
  tailwindDataVisualizationRoute: typeof tailwindDataVisualizationRoute
  tailwindLandingPageRoute: typeof tailwindLandingPageRoute
  tailwindRandomRoute: typeof tailwindRandomRoute
  tailwindSocialFeedRoute: typeof tailwindSocialFeedRoute
}

const tailwindRouteRouteChildren: tailwindRouteRouteChildren = {
  tailwindAdminSettingsRoute: tailwindAdminSettingsRoute,
  tailwindAnotherRoute: tailwindAnotherRoute,
  tailwindDataVisualizationRoute: tailwindDataVisualizationRoute,
  tailwindLandingPageRoute: tailwindLandingPageRoute,
  tailwindRandomRoute: tailwindRandomRoute,
  tailwindSocialFeedRoute: tailwindSocialFeedRoute,
}

const tailwindRouteRouteWithChildren = tailwindRouteRoute._addFileChildren(
  tailwindRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  authedRouteRoute: authedRouteRouteWithChildren,
  tailwindRouteRoute: tailwindRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
